name: Dev.to Article Publisher and Validator

on:
  push:
    paths:
      - "articles/**/*.md"

permissions:
  contents: write

jobs:
  # Job for validating articles tags
  validate-article-tags:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Dev.to articles tags
        run: |
          #!/bin/bash
          set -euo pipefail

          ARTICLES_DIR="articles"
          VALID=true

          # Regex for valid tags: Alphanumeric only, disallowing `-` and `_`
          TAG_REGEX="^[a-zA-Z0-9]+$"

          echo "Validating tags in Markdown files under '${ARTICLES_DIR}'..."

          # Loop through all Markdown files in the articles directory
          for file in "${ARTICLES_DIR}"/*.md; do
            if [[ ! -f "$file" ]]; then
                echo "No Markdown files found in ${ARTICLES_DIR}. Skipping validation."
                exit 0
            fi

            echo "Checking file: $file"

            # Extract YAML frontmatter (assuming frontmatter is between --- lines)
            FRONTMATTER=$(awk '/^---$/ {if (++count <= 2) next} count <= 2 {print}' "$file")
            if [[ -z "$FRONTMATTER" ]]; then
                echo "[SKIPPED] No frontmatter found in $file"
                continue
            fi

            # Extract tags from frontmatter in different formats
            TAGS=$(echo "$FRONTMATTER" | grep -E '^tags:' | sed -E 's/^tags:[[:space:]]*//')

            if [[ -z "$TAGS" ]]; then
                echo "[SKIPPED] No tags found in frontmatter of $file"
                continue
            fi

            # Handle different formats of tags
            if [[ "$TAGS" =~ ^\[(.*)\]$ ]]; then
                # Case: Array format (tags: ['github', 'dev.to', ...])
                TAGS=$(echo "$TAGS" | sed "s/['\[\]]//g" | tr ',' '\n')
            elif [[ "$TAGS" =~ ^'.*'$ ]]; then
                # Case: Single-quoted format (tags: 'github, dev.to, ...')
                TAGS=$(echo "$TAGS" | sed "s/[' ]//g" | tr ',' '\n')
            else
                # Case: Comma-separated format (tags: github, dev.to, ...)
                TAGS=$(echo "$TAGS" | tr ',' '\n')
            fi

            # Validate each tag
            for tag in $TAGS; do
                # Remove leading/trailing quotes before validating
                tag=$(echo "$tag" | sed "s/^['\"]*//;s/['\"]*$//")

                if [[ ! "$tag" =~ $TAG_REGEX ]]; then
                    echo "Whoops, something went wrong:"
                    echo "tag: \"$tag\" in $file contains non-alphanumeric or prohibited characters."
                    VALID=false
                fi
            done
          done

          if [[ "$VALID" == false ]]; then
            echo "Validation failed. Please fix invalid tags."
            exit 1
          else
            echo "All tags are valid!"
          fi

  # Job for publishing articles when pushing to main
  publish-article:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Ensure this job only runs on the main branch
    needs: validate-article-tags

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch all history
        run: |
          git fetch --all

      - name: Determine Changed Files
        id: changed_files
        run: |
          # Ensure we have access to the previous commit
          PREVIOUS_COMMIT=$(git rev-list --parents -n 1 HEAD | awk '{print $2}')
          echo "Previous commit: $PREVIOUS_COMMIT"

          # List only added files (using --diff-filter=A to catch only new files)
          git diff --name-only --diff-filter=A "$PREVIOUS_COMMIT" HEAD | grep "^articles/.*\.md$" > changed_files.txt

          # Print changed files
          cat changed_files.txt

          # Save the list of changed files as an environment variable
          CHANGED_FILES=$(paste -sd, changed_files.txt)
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_ENV

      - name: Set matrix
        id: set_matrix
        run: |
          # Prepare matrix for matrix strategy
          CHANGED_FILES=$(echo ${{ env.changed_files }} | tr ',' '\n')
          echo "::set-output name=files::$(echo $CHANGED_FILES)"

      - name: Publish changed markdown articles to Dev.to
        uses: sinedied/publish-devto@v2
        with:
          devto_key: ${{ secrets.DEVTO_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: ${{ matrix.files }}  # Each file from the matrix will be processed individually
          branch: ${{ github.ref_name }}
          conventional_commits: true
          dry_run: false
        env:
          GIT_COMMITTER_NAME: ${{ github.actor }}
          GIT_COMMITTER_EMAIL: ${{ github.actor }}@users.noreply.github.com

    strategy:
      matrix:
        files: ${{ fromJson(steps.set_matrix.outputs.files) }}  # Splits the output into individual files

  # Job for validating articles when pushing to feature branches
  validate-article:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main' # Ensure this job only runs on feature branches
    needs: validate-article-tags

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate articles to Dev.to
        uses: sinedied/publish-devto@v2
        with:
          devto_key: ${{ secrets.DEVTO_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: "articles/**/*.md"
          branch: ${{ github.ref_name }}
          conventional_commits: true
          dry_run: true
        env:
          GIT_COMMITTER_NAME: ${{ github.actor }}
          GIT_COMMITTER_EMAIL: ${{ github.actor }}@users.noreply.github.com
